/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

/*Runtime: 44 ms, faster than 26.64% of C++ online submissions for Binary Tree Maximum Path Sum.
Memory Usage: 28.7 MB, less than 6.06% of C++ online submissions for Binary Tree Maximum Path Sum.*/
class Solution {
public:
    int maxSum(TreeNode *root, int &res)
    {
        if(!root)
            return -100;
        if(!root->left && !root->right)
            return root->val;
        int left= maxSum(root->left, res);
        int right = maxSum(root->right,res);
        int maxToReturn = max(root->val,max(root->val+left, root->val+right));
        res = max(res, max(max(max(root->val,max(left,right)),root->val+left+right),maxToReturn));
        return maxToReturn;
    }
    int maxPathSum(TreeNode* root) {
        
        if(!root->left && !root->right)
            return root->val;
        int res=INT_MIN;
        
        maxSum(root,res);
        return res;
        
        
    }
};
