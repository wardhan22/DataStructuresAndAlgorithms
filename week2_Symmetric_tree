/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*Runtime: 12 ms, faster than 10.74% of C++ online submissions for Symmetric Tree.
Memory Usage: 16.4 MB, less than 8.48% of C++ online submissions for Symmetric Tree.

*/
class Solution {
public:
    //iterative
    bool isSymmetric(TreeNode* root) {
        if(!root || (!root->left && !root->right))
           return true;
        queue<TreeNode*> q;
        q.push(root);
        q.push(root);
        while(!q.empty())
        {
            auto x=q.front();
            q.pop();
            auto y=q.front();
            q.pop();
            if(!x && !y)
                continue;;
            if(!x || !y)
                return false;
            if(x->val != y->val)
                return false;
            q.push(x->left);
            q.push(y->right);
            q.push(x->right);
            q.push(y->left);
        }
        return true;
    }
    
    //recursive
 /*   bool isMirror(TreeNode *p , TreeNode *q)
    {
         if(!p && !q)
            return true;
        if(!p || !q)
            return false;
        return (p->val==q->val && isMirror(p->left,q->right) && 
                isMirror(p->right,q->left));
    }
    bool isSymmetric(TreeNode* root) {
       if(!root || (!root->left && !root->right))
           return true;
        return isMirror(root->left,root->right);
    }*/
};
