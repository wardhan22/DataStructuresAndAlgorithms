/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*Runtime: 4 ms, faster than 95.59% of C++ online submissions for Binary Tree Level Order Traversal II.
Memory Usage: 12.8 MB, less than 100.00% of C++ online submissions for Binary Tree Level Order Traversal II.*/

class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
       stack<vector<int>> s;
        vector<vector<int>> res;
        queue<TreeNode *> q;
        if(!root)
        {
            return res;
        }
        q.push(root);
        int size=0;
        while(!q.empty())
        {
            vector<int> v;
            size = q.size();
            while(size--)
            {
                auto temp = q.front();
                q.pop();
                v.push_back(temp->val);
                if(temp->left)
                    q.push(temp->left);
                if(temp->right)
                    q.push(temp->right);
            }
            s.push(v);
        }
        
        while(!s.empty())
        {
           res.push_back(s.top());
            s.pop();
        }
        return res;
    }
};
