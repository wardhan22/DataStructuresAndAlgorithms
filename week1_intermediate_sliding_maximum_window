/*Runtime: 88 ms, faster than 34.53% of C++ online submissions for Sliding Window Maximum.
Memory Usage: 28.1 MB, less than 6.56% of C++ online submissions for Sliding Window Maximum.*/

/*Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

Follow up:
Could you solve it in linear time?

Example:

Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3
Output: [3,3,5,5,6,7] 
Explanation: 

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
*/

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& arr, int k) {
        vector<int> res;
        int n=arr.size();
        deque<int> q;
        for(int i=0;i<k;i++)
        {
            if(q.empty())
                q.push_back(i);
            else if(arr[i]<=arr[q.back()])
                q.push_back(i);
            else
            {
                while(!q.empty() && arr[i]>arr[q.back()])
                    q.pop_back();
                q.push_back(i);
                    
            }
        }
        res.push_back(arr[q.front()]);
        for(int i=k;i<n;i++)
        {
            if(arr[i-k]==arr[q.front()])
            {
                q.pop_front();
            }
            if(q.empty())
                q.push_back(i);
            else if(arr[i]<=arr[q.back()])
                q.push_back(i);
            else
            {
                while(!q.empty() && arr[i]>arr[q.back()])
                    q.pop_back();
                q.push_back(i);       
            }
            res.push_back(arr[q.front()]);
            
        }
        return res;
    }
};
