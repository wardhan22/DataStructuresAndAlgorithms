/*
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

You may assume no duplicate exists in the array.

Example 1:

Input: [3,4,5,1,2] 
Output: 1

Runtime: 4 ms, faster than 64.16% of C++ online submissions for Find Minimum in Rotated Sorted Array.
Memory Usage: 10.3 MB, less than 6.67% of C++ online submissions for Find Minimum in Rotated Sorted Array.

Edge cases

[2,1]
[1,2]
[1]
*/

class Solution {
public:
    int findMin(vector<int>& nums) {
        int low=0, high=nums.size()-1;
        int mid;
        while(low<high)
        {
            mid=low+(high-low)/2;
            if(nums[mid]>nums[high])
            {
                low=low+1;
            }
            else
            {
                high=mid;
            }
        }
        return nums[low];
    }
};
