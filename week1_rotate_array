
/*Given an array, rotate the array to the right by k steps, where k is non-negative.

Follow up:

Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
Could you do it in-place with O(1) extra space?
 

Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]*/


/*Runtime: 8 ms, faster than 93.48% of C++ online submissions for Rotate Array.
Memory Usage: 9.9 MB, less than 13.89% of C++ online submissions for Rotate Array.*/

class Solution {
    void reverse(vector<int>&arr,int i,int j)
    {
        while(i<j)
        {
            swap(arr[i],arr[j]);
            i++;
            j--;
        }
    }
public:
    void rotate(vector<int>& nums, int k) {
        int size= nums.size();
        k=k%size;
        if(k==0 || size==0 || size==1)
            return;
       
        reverse(nums,size-k, size-1);
        reverse(nums,0,size- k-1);
        reverse(nums,0,size-1);
        
    }
};
