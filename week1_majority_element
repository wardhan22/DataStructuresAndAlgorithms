class Solution {
public:
    /* using bit manipulation Runtime: 52 ms, faster than 32.50% of C++ online submissions for Majority Element.
Memory Usage: 19.6 MB, less than 6.06% of C++ online submissions for Majority Element. */
    int majorityElement(vector<int>& nums) {
        int n= nums.size();
        int count=0;
        int res=0;
        int len= sizeof(nums[0])*8;
        for(int i=0;i<len;i++)
        {
            count=0;
            for(int j=0;j<n;j++)
            {
                if(nums[j]&(1<<i))
                    count++;
            }
            if(count>n/2)
                res=res+(1<<i);
        }
        count=0;
        for(int i=0;i<n;i++)
        {
            if(nums[i]==res)
                count++;
        }
        if(count>n/2)
            return res;
        else 
            return 0;
    }
    
    
    
    /*using map---Runtime: 56 ms, faster than 21.87% of C++ online submissions for Majority Element.
Memory Usage: 19.9 MB, less than 6.06% of C++ online submissions for Majority Element.*/
  /*  int majorityElement(vector<int>& nums) {
        map<int,int> mp;
        for(int i=0;i<nums.size();i++)
        {
            if(mp.find(nums[i])==mp.end())
                mp[nums[i]]=1;
            else
            {
                mp[nums[i]]++;
            }
        }
        int result=0;
        for(auto i : mp)
        {
            if(i.second>nums.size()/2)
            {
                //cout<<i.first<<endl;
                result= i.first;
            }
        }
        return result;    
                
            
    }*/
    
    /* Using moore voting Algo Runtime: 44 ms, faster than 58.16% of C++ online submissions for Majority Element.
Memory Usage: 20 MB, less than 6.06% of C++ online submissions for Majority Element.*/
   /* int majorityElement(vector<int>& nums) {
      int count=1;
        int index=0;
        for(int i=1;i<nums.size();i++)
        {
            if(nums[i]==nums[index])
                count++;
            else
            {
                count--;
                if(count==0)
                {
                    index=i;
                    count=1;
                }
            }
        }
        count=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==nums[index])
               count++;
            if(count>nums.size()/2)
                return nums[index];
        }
        return 0;
    }*/
};
