/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

/*Runtime: 16 ms, faster than 91.03% of C++ online submissions for Convert Sorted Array to Binary Search Tree.
Memory Usage: 20.5 MB, less than 97.30% of C++ online submissions for Convert Sorted Array to Binary Search Tree.*/
class Solution {
public:
    TreeNode* createTree(vector<int>& nums, int l,int h)
    {
        if(l<=h)
        {
            int mid = l+(h-l)/2;
            TreeNode * root = new TreeNode(nums[mid]);
            root->left = createTree(nums,l,mid-1);
            root->right = createTree(nums,mid+1,h);
            return root;
        }
        else
        {
            return nullptr;
        }
    }
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        
        return createTree(nums,0,nums.size()-1);
    }
};
