/*Runtime: 16 ms, faster than 34.03% of C++ online submissions for Find First and Last Position of Element in Sorted Array.
Memory Usage: 14 MB, less than 5.49% of C++ online submissions for Find First and Last Position of Element in Sorted Array.*/

/*Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]*/

class Solution {
public:
    enum class index {left,right};
    int binarySearch(vector<int> &nums, int target, int low, int high,index ind)
    {
        int size= nums.size();
        int res=-1;
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            //cout<<"mid "<<mid;
            if(nums[mid]==target)
            {
               // cout<<"inside";
                res=mid;
                if(ind==index::left)
                high=mid-1;
                else
                low=mid+1;
            }
            else if(nums[mid]>target)
            {
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
        return res;
    }
    vector<int> searchRange(vector<int>& nums, int target) 
    {
    
       // cout<<left;
        vector<int> res;
        res.push_back(binarySearch(nums,target,0,nums.size()-1,index::left));  // left index
        if(res[0]==-1)
        {
        res.push_back(-1);
            return res;
        }
        else
        {
            res.push_back(binarySearch(nums,target,res[0],nums.size()-1,index::right)); // right index
        }
        return res;
    }
};
